diff --git a/pkg/chrootarchive/chroot_linux.go b/pkg/chrootarchive/chroot_linux.go
index 1c560ce59f..c32f5c71f5 100644
--- a/pkg/chrootarchive/chroot_linux.go
+++ b/pkg/chrootarchive/chroot_linux.go
@@ -19,6 +19,13 @@ import (
 // Old root is removed after the call to pivot_root so it is no longer available under the new root.
 // This is similar to how libcontainer sets up a container's rootfs
 func chroot(path string) (err error) {
+	// LP:1703988 Unfortunately this issue happens when storage backend is one of them(aufs, overlay, btrfs) in snappy,
+	// To unblock this, we use realChroot as a workaround at this moment.
+	if os.Getenv("SNAP") != "" {
+		// Ubuntu Snappy 16.04+
+		return realChroot(path)
+	}
+
 	// if the engine is running in a user namespace we need to use actual chroot
 	if sys.RunningInUserNS() {
 		return realChroot(path)
diff --git a/pkg/chrootarchive/diff_unix.go b/pkg/chrootarchive/diff_unix.go
index c64efefcdc..534509e83b 100644
--- a/pkg/chrootarchive/diff_unix.go
+++ b/pkg/chrootarchive/diff_unix.go
@@ -111,6 +111,7 @@ func applyLayerHandler(dest string, layer io.Reader, options *archive.TarOptions
 	cmd := reexec.Command("docker-applyLayer", dest)
 	cmd.Stdin = layer
 	cmd.Env = append(cmd.Env, fmt.Sprintf("OPT=%s", data))
+	cmd.Env = append(cmd.Env, fmt.Sprintf("SNAP=%s", os.Getenv("SNAP")))
 
 	outBuf, errBuf := new(bytes.Buffer), new(bytes.Buffer)
 	cmd.Stdout, cmd.Stderr = outBuf, errBuf
